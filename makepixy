######################################################################
# makepixy
#
# Builds Pixy demo app using gmake instead of cmake madness
######################################################################

ifndef PIXY_HOME
PIXY_HOME := "/home/pi/pixy"
endif
PIXY_INCLUDES = -I$(PIXY_HOME)/src/common/inc \
   -I$(PIXY_HOME)/src/host/libpixyusb/include \
   -I/usr/include/libusb-1.0

# Libraries that need to be linked: libpixyusb libusb-2.0 libusb boost-thread boost-system boost-chrono
# -L defines library search paths; -l defines library name (minus "lib" prefix)
PIXY_LIBS = -L$(PIXY_HOME)/build -lpixyusb \
   -L/usr/lib/arm-linux-gnueabihf -lboost_thread -lboost_system \
   -lboost_chrono -lpthread -lusb-1.0
#CXX_DEFINES = -D__LIBPIXY_VERSION__=\"0.4\"

# If undefined in the environment default NDDSHOME to install dir
ifndef NDDSHOME
NDDSHOME := "/Applications/rti_connext_dds-5.3.0"
endif

TARGET_ARCH = armv7aLinux3.12gcc4.9.3cortex-a9

ifndef COMPILER
COMPILER = arm-linux-gnueabihf-g++
endif
COMPILER_FLAGS =
ifndef LINKER
LINKER = arm-linux-gnueabihf-g++
endif
LINKER_FLAGS = -static-libgcc
SYSLIBS = -ldl -lnsl -lm -lpthread -lrt
DEFINES = -fpic -DRTI_UNIX -DRTI_LINUX -march=armv7-a -mcpu=cortex-a9 -mlong-calls -D__LIBPIXY_VERSION__=\"0.4\"

INCLUDES = -I. -I$(NDDSHOME)/include -I$(NDDSHOME)/include/ndds

LIBS = -L$(NDDSHOME)/lib/$(TARGET_ARCH) \
        -lnddscpp -lnddsc -lnddscore $(SYSLIBS)

CDRSOURCES    = ShapeType.idl
COMMONSOURCES = ShapeTypeSupport.cxx ShapeTypePlugin.cxx ShapeType.cxx \
                ServoControlSupport.cxx ServoControlPlugin.cxx ServoControl.cxx

#EXEC          = ShapeType_subscriber ShapeType_publisher pixyshapes
EXEC          = pixyshapes
DIRECTORIES   = objs.dir objs/$(TARGET_ARCH).dir
COMMONOBJS    = $(COMMONSOURCES:%.cxx=objs/$(TARGET_ARCH)/%.o)

# We actually stick the objects in a sub directory to keep your directory clean.
$(TARGET_ARCH) : $(DIRECTORIES) $(COMMONOBJS) \
	$(EXEC:%=objs/$(TARGET_ARCH)/%.o) \
	$(EXEC:%=objs/$(TARGET_ARCH)/%)

objs/$(TARGET_ARCH)/% : objs/$(TARGET_ARCH)/%.o
	$(LINKER) $(LINKER_FLAGS)   -o $@ $@.o $(COMMONOBJS) $(PIXY_LIBS) $(LIBS)
#	$(LINKER) $(LINKER_FLAGS)   -o $@ $@.o $(COMMONOBJS) $(LIBS)

objs/$(TARGET_ARCH)/%.o : %.cxx  ShapeType.h
	$(COMPILER) $(COMPILER_FLAGS)  -o $@ $(DEFINES) $(PIXY_INCLUDES) $(INCLUDES) -c $<

#
# Uncomment these lines if you want the support files regenerated when idl
# file is modified
#
#
#  ShapeTypeSupport.cxx ShapeTypePlugin.cxx ShapeType.cxx \
#  ShapeTypeSupport.h ShapeTypePlugin.h ShapeType.h : \
#		ShapeType.idl
#	$(NDDSHOME)/bin/rtiddsgen ShapeType.idl -replace -language C++

# Here is how we create those subdirectories automatically.
%.dir :
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;
