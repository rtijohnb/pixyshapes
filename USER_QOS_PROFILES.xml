<?xml version="1.0"?>
<!--
Description
XML QoS Profile for ShapeType

The QoS configuration of the DDS entities in the generated example is loaded
from this file.

This file is used only when it is in the current working directory or when the
environment variable NDDS_QOS_PROFILES is defined and points to this file.

The profile in this file inherits from the builtin QoS profile
BuiltinQosLib::Generic.StrictReliable. That profile, along with all of the
other built-in QoS profiles can be found in the
BuiltinProfiles.documentationONLY.xml file located in the
$NDDSHOME/resource/xml/ directory.

You may use any of these QoS configurations in your application simply by
referring to them by the name shown in the
BuiltinProfiles.documentationONLY.xml file and listed below:

* In library "BuiltinQosLib":
** Baseline
** Baseline.5.0.0
** Baseline.5.1.0
** Baseline.5.2.0
** Generic.Common
** Generic.510TransportCompatibility
** Generic.Monitoring.Common
** Generic.ConnextMicroCompatibility
** Generic.OtherDDSVendorCompatibility

* In library "BuiltinQosLibExp":
** Generic.StrictReliable
** Generic.KeepLastReliable
** Generic.BestEffort
** Generic.StrictReliable.HighThroughput
** Generic.StrictReliable.LowLatency
** Generic.Participant.LargeData
** Generic.Participant.LargeData.Monitoring
** Generic.StrictReliable.LargeData
** Generic.KeepLastReliable.LargeData
** Generic.StrictReliable.LargeData.FastFlow
** Generic.StrictReliable.LargeData.MediumFlow
** Generic.StrictReliable.LargeData.SlowFlow
** Generic.KeepLastReliable.LargeData.FastFlow
** Generic.KeepLastReliable.LargeData.MediumFlow
** Generic.KeepLastReliable.LargeData.SlowFlow
** Generic.KeepLastReliable.TransientLocal
** Generic.KeepLastReliable.Transient
** Generic.KeepLastReliable.Persistent
** Generic.AutoTuning
** Pattern.PeriodicData
** Pattern.Streaming
** Pattern.ReliableStreaming
** Pattern.Event
** Pattern.AlarmEvent
** Pattern.Status
** Pattern.AlarmStatus
** Pattern.LastValueCache

You should not edit the file BuiltinProfiles.documentationONLY.xml directly.
However, if you wish to modify any of the values in a built-in profile, the
recommendation is to create a profile of your own and inherit from the built-in
profile you wish to modify. The NDDS_QOS_PROFILES.example.xml file (contained in
the same directory as the BuiltinProfiles.documentationONLY.xml file) shows how
to inherit from the built-in profiles.

For more information about XML QoS Profiles see Chapter 17 in the
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="/Applications/rti_connext_dds-5.2.4/resource/schema/rti_dds_qos_profiles.xsd"
     version="5.2.4">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="ShapeType_Library">

        <!-- QoS profile used to configure reliable communication between the DataWriter
             and DataReader created in the example code.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="ShapeType_Profile" base_name="BuiltinQosLibExp::Generic.StrictReliable" is_default_qos="true">
            <!-- QoS used to configure the data writer created in the example code -->
            <datawriter_qos>
                <publication_name>
                    <name>ShapeTypeDataWriter</name>
                </publication_name>
		<lifespan>
			<duration>
				<sec>5</sec>
				<nanosec>0</nanosec>
			</duration>
		</lifespan>
		<reliability>
			<kind>RELIABLE_RELIABILITY_QOS</kind>
			<max_blocking_time>
				<sec>1</sec>
				<nanosec>0</nanosec>
			</max_blocking_time>
		</reliability>
		<history>
			<kind>KEEP_LAST_HISTORY_QOS</kind>
			<depth>10</depth>
		</history>
		<resource_limits>
			<max_samples>100</max_samples>
		</resource_limits>
		<batch>
			<enable>true</enable>
			<max_samples>10</max_samples>
		</batch>
            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->
            <datareader_qos>
                <subscription_name>
                    <name>ShapeTypeDataReader</name>
                </subscription_name>
            </datareader_qos>
            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI tools, making it easier for you to tell one
                application from another when you're debugging.
                -->
		<transport_builtin>
		    <mask>UDPv4</mask>
		</transport_builtin>
                <participant_name>
                    <name>PixyShapes</name>
                    <role_name>PixyShapePublisher</role_name>
                </participant_name>

                <property>
                    <value>
                        <element>
                            <name>dds.transport.UDPv4.builtin.multicast_ttl</name>
                            <value>9</value>
                        </element>

                <!-- Enable monitoring -->
<!--
                        <element>
                            <name>rti.monitor.library</name>
                            <value>rtimonitoring</value>
                        </element>

                        <element>
                            <name>rti.monitor.create_function</name>
                            <value>RTIDefaultMonitor_create</value>
                        </element>
-->
                    </value>
                </property>

            </participant_qos>
        </qos_profile>
    </qos_library>
</dds>
